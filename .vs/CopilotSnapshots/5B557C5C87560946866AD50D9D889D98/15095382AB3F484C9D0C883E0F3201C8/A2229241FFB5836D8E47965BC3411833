using App.Helpers;
using Domain.Helpers;
using Domain.Interfaces;
using Domain.Models;
using Domain.OutfaceModels;
using Microsoft.AspNetCore.ResponseCompression;
using Microsoft.AspNetCore.Rewrite;
using Microsoft.Extensions.Options;
using Swashbuckle.AspNetCore.SwaggerUI;
using System.Reflection;



var builder = WebApplication.CreateBuilder(args);

builder.Services.AddCustomLogging();

var envConf = builder.Configuration.GetSection("App");
var appSetting = new AppSetting();
envConf.Bind(appSetting);
builder.Services.Configure<AppSetting>(envConf);

builder.Services.AddDbContext(appSetting.Db);

//builder.Services.AddControllersWithViews()
//    .ConfigureApplicationPartManager(manager =>
//    {
//        manager.ApplicationParts.Clear();
//        manager.ApplicationParts.Add(new AssemblyPart(typeof(Program).Assembly));
//    });
//.AddNewtonsoftJson(opt => opt.SerializerSettings.DateTimeZoneHandling = DateTimeZoneHandling.Unspecified);

builder.Services
    .AddMvcOptions()
    .InjectAllLogics()

    //- Register Fluent validator
    .AddFluentValidationAutoValidation();
  

builder.Services.AddTransient(sp =>
{
    var configuration = sp.GetRequiredService<IConfiguration>();
    var listName = configuration["PaymentRedis:ListName"];
    var concurrencySupport = int.Parse(configuration["PaymentRedis:ConcurrencySupport"]);
    var multipleSupport = int.Parse(configuration["PaymentRedis:MultipleSupport"]);
    var config = sp.GetRequiredService<DirectDebitPaymentConfig>();

    return new PaymentRedisWorkerConfig(listName, concurrencySupport, multipleSupport, config);
});

builder.Services.AddSingleton<IConnectionMultiplexer>(provider =>
{
    var configuration = ConfigurationOptions.Parse(appSetting.RedisUrl, true);
    return ConnectionMultiplexer.Connect(configuration);
});


builder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());

builder.Services.AddCors(o => o.AddPolicy("corsPolicy", builder =>
{
    builder.AllowAnyOrigin()
           .AllowAnyMethod()
           .AllowAnyHeader();
}));

// make route to lowercase
builder.Services.Configure<RouteOptions>(options => options.LowercaseUrls = true);

builder.Services.AddSwaggerDoc(appSetting, title: "Bill24 - StaffManagement API");
//builder.Services.AddSwaggerExamplesFromAssemblyOf<TransactionVerifRequestExampleModel>();


//builder.Services.AddSingleton<IBill24RMQ, BaseRMQ>();

builder.Services.AddHttpContextAccessor();
builder.Services.AddResponseCompression(opt => opt.Providers.Add<GzipCompressionProvider>());
builder.Services.AddScoped<Domain.Interfaces.IHttpContextScope, BillerHttpContextScope>();

//- Apply localize 
//  Caller able to pass supported localize from request header 
//  Example value: -H Accept-Language: km-KH.
builder.Services.AddScoped<IHttpLocalizeScope, HttpLocalizeScope>();
builder.Services.AddSingleton<SharedLocalize>();

var app = builder.Build();

app.UseMiddleware<AuthMiddleware>(appSetting.IdentityServerUrl);
//app.UseMiddleware<CustomStaffManagementMiddleware>();
app.UseMiddleware<ExceptHandlingMiddleware>();
app.UseMiddleware<TimeValidatorMiddleware>();
app.UseMiddleware<StaffManagementMiddleware>();
//app.UseMiddleware<RefererKeyValidatorMiddleware>();


app.UseCors("corsPolicy");
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();
app.MapControllers();
app.UseResponseCompression();
app.UseHttpsRedirection();
app.UseServiceActivator();
app.UseMiddleware<ValidateRefererKeyMiddleware>();
if (appSetting.EnableSwagger)
{
    app.UseSwagger();
    app.UseSwaggerUI(setup => setup.DocExpansion(DocExpansion.None));
    app.UseRewriter(new RewriteOptions().AddRedirect("^$", "swagger"));
}
else
{
    app.Run(async context => await context.Response.WriteAsync("Merchant API running ..."));
}

app.Run();