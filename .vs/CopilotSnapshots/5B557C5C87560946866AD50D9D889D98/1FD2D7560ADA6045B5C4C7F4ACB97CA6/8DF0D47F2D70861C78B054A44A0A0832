using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using App.Db;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using App.Logics;
using Domain.Interfaces;
using Domain.Enums;
using Domain.OutfaceModels;

namespace App.Logics;

// Example operation enum (update as needed)
public class BankApiLogic : MasterLogic
{
    public BankApiLogic(StaffManagementDbContext db, IHttpContextScope current) 
        : base(db, current)
    {
    }

    /// <summary>
    /// Add a new bank API log entry, extracting operation from URL if possible
    /// </summary>
    public async Task AddAsync(BankApiRequestModel model)
    {
        // Extract operation from URL
        if (!string.IsNullOrEmpty(model.Url))
        {
            foreach (var op in Enum.GetValues<OperationEnum>())
            {
                if (model.Url.Contains(op.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    model.Operation = op.ToString();
                    break;
                }
            }
        }

        model.RequestDate ??= DateTime.UtcNow;
        model.Elapse ??= (int)(model.ResponseDate?.Subtract(model.RequestDate.Value).TotalMilliseconds ?? 0);

        await _db.BankApis.AddAsync(model);
        await _db.SaveChangesAsync();

    }

    /// <summary>
    /// Find bank API log by ID
    /// </summary>
    public async Task<BankApi?> FindAsync(int id)
        => await _db.BankApis.FindAsync(id);

    /// <summary>
    /// Get all bank API logs with optional filtering
    /// </summary>
    public IQueryable<BankApi> GetAll(
        DateTime? fromDate = null,
        DateTime? toDate = null,
        string? bankId = null,
        string? tranId = null)
    {
        var query = _db.BankApis.AsNoTracking();

        if (fromDate.HasValue)
            query = query.Where(x => x.RequestDate >= fromDate.Value);

        if (toDate.HasValue)
            query = query.Where(x => x.RequestDate <= toDate.Value);

        if (!string.IsNullOrEmpty(bankId))
            query = query.Where(x => x.BankId == bankId);

        if (!string.IsNullOrEmpty(tranId))
            query = query.Where(x => x.TranId == tranId);

        return query.OrderByDescending(x => x.RequestDate);
    }

    /// <summary>
    /// Log a new API request with request details
    /// </summary>
    //public async Task<object> LogRequestAsync(
    //    string method,
    //    string url,
    //    string? bankId = null,
    //    string? payload = null,
    //    IDictionary<string, string>? headers = null)
    //{
    //    var bankApi = new BankApi
    //    {
    //        Method = method,
    //        Url = url,
    //        BankId = bankId,
    //        Payload = payload,
    //        Header = headers != null ? string.Join(Environment.NewLine, headers.Select(h => $"{h.Key}: {h.Value}")) : null,
    //        RequestDate = DateTime.UtcNow,
    //        Ip = _current?.ClientInfo?.IpAddress
    //    };

    //    return await AddAsync(bankApi);
    //}

    /// <summary>
    /// Update an existing bank API log with response details
    /// </summary>
    public async Task<BankApi> UpdateResponseAsync(
        int id,
        HttpStatusCode statusCode,
        string? response = null,
        string? bankRef = null)
    {
        var bankApi = await FindAsync(id) ?? throw new Exception($"Bank API log not found: {id}");

        bankApi.StatusCode = statusCode.ToString();
        bankApi.Response = response;
        bankApi.BankRef = bankRef;
        bankApi.ResponseDate = DateTime.UtcNow;
        bankApi.Elapse = (int)(bankApi.ResponseDate.Value - bankApi.RequestDate!.Value).TotalMilliseconds;

        _db.BankApis.Update(bankApi);
        await _db.SaveChangesAsync();

        return bankApi;
    }

    /// <summary>
    /// Get recent API logs for a specific bank
    /// </summary>
    public async Task<List<BankApi>> GetRecentLogsAsync(
        string bankId,
        int limit = 10)
    {
        return await _db.BankApis
            .Where(x => x.BankId == bankId)
            .OrderByDescending(x => x.RequestDate)
            .Take(limit)
            .ToListAsync();
    }
}
