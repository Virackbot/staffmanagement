using Microsoft.AspNetCore.Http;
using Sentry;
using System.Text;

namespace App.Helpers.MiddleWares
{
    public class ErrorHandlingMiddleware
    {
        private readonly RequestDelegate next;

        public ErrorHandlingMiddleware(RequestDelegate next)
        {
            this.next = next;
        }

        public async Task Invoke(HttpContext context)
        {
            try
            {
                await next(context);
                
                // Capture 4xx and 5xx responses as events (optional)
                if (context.Response.StatusCode >= 400)
                {
                    SentrySdk.AddBreadcrumb($"HTTP {context.Response.StatusCode} - {context.Request.Method} {context.Request.Path}");
                    
                    // Only capture 5xx as exceptions, 4xx as events
                    if (context.Response.StatusCode >= 500)
                    {
                        SentrySdk.CaptureMessage($"HTTP {context.Response.StatusCode} Error: {context.Request.Method} {context.Request.Path}", Sentry.Protocol.SentryLevel.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                SentrySdk.CaptureException(ex);
                
                // Re-throw to let the framework handle the response
                throw;
            }
        }
    }
}
