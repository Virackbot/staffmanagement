using Microsoft.Extensions.DependencyInjection;
using System.Reflection;
using System.Text.Json.Serialization;
using App.Db;

namespace Bill24PG.App.Logics;

/// <summary>
/// Base logic class providing core database and validation functionality
/// </summary>
public class MasterLogic
{
    protected readonly StaffManagementDbContext _db;
    protected readonly IHttpContextScope _current;

    public MasterLogic(StaffManagementDbContext db, IHttpContextScope current)
    {
        _db = db;
        _current = current;
    }

    public async Task<T> WrapAsync<T>(Func<Task<T>> action, int timeout = 10 * 60)
        => await _db.WrapAsync(action, timeout);

    public TLogic GetLogic<TLogic>() where TLogic : class
    {
        return _current.Provider.GetService<TLogic>()
            ?? throw new Exception($"Service {nameof(TLogic)} not registered.");
    }

    protected List<string> ValidateRequest<T>(T payload, List<string> fieldNames)
    {
        var missingFields = new List<string>();

        foreach (var fieldName in fieldNames)
        {
            var property = typeof(T).GetProperty(fieldName);
            if (property != null)
            {
                var jsonPropertyAttribute = property.GetCustomAttribute<JsonPropertyNameAttribute>();
                string displayName = jsonPropertyAttribute?.Name ?? property.Name;

                var value = property.GetValue(payload);
                if (IsRequiredField(value))
                {
                    missingFields.Add(displayName);
                }
            }
        }

        return missingFields;
    }

    private static bool IsRequiredField(object? value)
    {
        return value switch
        {
            null => true,
            string s => string.IsNullOrEmpty(s),
            DateTime dt => dt == default || dt == DateTime.MinValue,
            decimal d => d == 0m,
            double d => d == 0d,
            float f => f == 0f,
            _ => false
        };
    }
}

public class TDbLogic<T>
    : MasterLogic where T
    : TBaseModel<string>
{
    readonly bool _hasActiveColumn = false;
    public TDbLogic(StaffManagementDbContext db, IHttpContextScope current) : base(db, current)
    {
        _hasActiveColumn = typeof(T).GetProperties().Any(x => x.Name == "IsActive");
    }
    public async Task<T?> GetCacheAsync(string key, Func<Task<T?>> getter)
    {
        T? entity = null;
        if (_current.Cache != null)
        {
            entity = await _current.Cache.GetAsync<T>(key);
        }
        if (entity == null)
        {
            entity = await getter();
            if (entity != null && _current.Cache != null)
            {
                await _current.Cache.SetAsync(key, entity);
            }
        }
        return entity;
    }

    public virtual IQueryable<T> All()
    {
        return _db.Set<T>().Where(x => x.IsActive == true).AsNoTracking();
    }
    public virtual IQueryable<T> AllWithInactive()
    {
        return _db.Set<T>().AsNoTracking();
    }
    public virtual IQueryable<T> Search(ISearchModel model)
    {
        return All().AsNoTracking();
    }

    public virtual async Task<List<T>> SearchAsync(ISearchModel model)
    {
        return await All().ToListAsync();
    }

    public virtual async Task<T?> FindAsync(string? id)
    {
        if (id is null)
        {
            return default;
        }
        return await _db.Set<T>().FindAsync(id);
    }

    public virtual async Task<T> AddOrUpdateAsync(T entity)
    {
        string? id = null;
        if (entity is BaseModel baseModel
            && !string.IsNullOrEmpty(baseModel.Id))
        {
            id = baseModel.Id;
        }

        var old = await FindAsync(id!);
        if (old == null)
        {
            await AddAsync(entity);
        }
        else
        {
            await UpdateAsync(entity);
        }
        return entity;
    }

    public virtual async Task<T> AddAsync(T entity)
    {
        if (await IsExistsAsync(entity))
        {
            throw new UniqueException(model: entity);
        }
        _db.Entry(entity).State = EntityState.Detached;
        if (entity is BaseModel baseModel
            && string.IsNullOrEmpty(baseModel.Id))
        {
            baseModel.Id = Guid.NewGuid().ToString();
        }
        entity.CreatedBy = _current?.FullName ?? "-";
        entity.CreatedDate = DateTime.Now;
        SetActive(entity, true);
        _db.Entry(entity).State = EntityState.Added;
        await _db.SaveChangesAsync();
        return entity;
    }

    public virtual async Task<T> UpdateAsync(T entity)
    {
        try
        {
            if (await IsExistsAsync(entity))
            {
                throw new UniqueException(model: entity);
            }
            _db.Entry(entity).State = EntityState.Detached;
            entity.UpdatedBy = _current?.FullName ?? "-";
            entity.UpdatedDate = DateTime.Now;
            await UpdateUnsavedAsync(entity);
            await _db.SaveChangesAsync();

            return entity;
        }
        catch (DbUpdateConcurrencyException)
        {
            throw new LogicException(ExceptResx.DataConcurrencyConflicts);
        }
    }

    public virtual async Task<TEntity> UpdateUnsavedAsync<TEntity>(TEntity entity)
        where TEntity : class
    {
        var hasActiveColumn = typeof(TEntity).GetProperties().Any(x => x.Name == "IsActive");
        var dyn = entity as dynamic;
        _db.Entry(dyn).State = EntityState.Detached;

        var cur = await _db.Set<TEntity>().FindAsync(dyn.Id);

        if (hasActiveColumn)
        {
            if (dyn.IsActive)
            {
                _db.Entry(cur).CurrentValues.SetValues(dyn);
            }
            else
            {
                cur.UpdatedDate = DateTime.Now;
                cur.IsActive = false;
            }
        }
        else
        {
            _db.Entry(cur).CurrentValues.SetValues(dyn);
        }

        if (_current.Cache != null)
        {
            await _current.Cache.RemoveAsync($"{typeof(TEntity).Name}/{dyn.Id}");
        }

        return dyn;
    }

    public virtual async Task<T> RemoveAsync(string id)
    {
        var entity = await FindAsync(id);
        if (!await CanRemoveAsync(entity!))
        {
            throw new InusedException(model: entity);
        }
        return await RemoveAsync(entity!);
    }

    public virtual async Task<T> RemoveAsync(T entity)
    {
        var i = 0;
        var saved = false;
        while (!saved)
        {
            i++;
            if (i > 10) { throw new Exception("Too many tries"); }

            try
            {
                if (_hasActiveColumn)
                {
                    SetActive(entity, false);
                    await UpdateUnsavedAsync(entity);
                    await _db.SaveChangesAsync();
                }
                else
                {
                    _db.Remove(entity);
                    await _db.SaveChangesAsync();
                }
                saved = true;

            }
            catch (DbUpdateConcurrencyException)
            {

            }
        }
        return entity;
    }

    public virtual async Task<bool> CanRemoveAsync(string id)
    {
        var entity = await FindAsync(id);
        return await CanRemoveAsync(entity!);
    }
    public virtual async Task<bool> CanRemoveAsync(T entity)
    {
        return await Task.FromResult(true);
    }
    public virtual async Task<bool> IsExistsAsync(T entity)
    {
        return await Task.FromResult(false);
    }
    /// <summary>
    /// Equivaliant to  entity.Active = x;
    /// </summary>
    /// <param name="active"></param>
    private static void SetActive(T obj, bool active)
    {
        var pi = typeof(T).GetProperties().FirstOrDefault(x => x.Name == "IsActive");
        if (pi == null) { return; } // no active field
        pi.SetValue(obj, active);
    }
}

public class DbLogic<T> : TDbLogic<T> where T : ExtBaseModel
{
    public DbLogic(StaffManagementDbContext db, IHttpContextScope current) : base(db, current)
    {
    }
}

public class DbLogicWithoutExt<T> : TDbLogic<T> where T : BaseModel
{
    public DbLogicWithoutExt(StaffManagementDbContext db, IHttpContextScope current) : base(db, current)
    {
    }
}