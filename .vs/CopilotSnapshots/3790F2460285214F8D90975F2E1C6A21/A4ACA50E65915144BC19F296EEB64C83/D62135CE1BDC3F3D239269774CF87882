using App.Db;
using Domain.Helpers;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System.Data.Common;
using System.Reflection;
using System.Text.Json.Serialization;
using System.Transactions;

namespace App.Db;
    public class StaffManagementDbContext : DbContext
    {
        public StaffManagementDbContext()
        {
        }

        public StaffManagementDbContext(DbContextOptions<StaffManagementDbContext> options)
            : base(options)
        {
            AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);
        }

        protected StaffManagementDbContext(DbContextOptions opt) : base(opt) { }

        public async Task<T> WrapAsync<T>(Func<Task<T>> action, int timeout = 10 * 60)
        {
            Database.SetCommandTimeout(TimeSpan.FromSeconds(timeout));
            var strategy = Database.CreateExecutionStrategy();
            return await strategy.Execute(async () =>
            {
                using var tran = new TransactionScope(
                    scopeOption: TransactionScopeOption.Required,
                    transactionOptions: new TransactionOptions()
                    {
                        IsolationLevel = IsolationLevel.ReadCommitted,
                        Timeout = TimeSpan.FromSeconds(timeout)
                    },
                    asyncFlowOption: TransactionScopeAsyncFlowOption.Enabled);

                if (Database.GetDbConnection().State != System.Data.ConnectionState.Open)
                {
                    Database.GetDbConnection().Open();
                }

                T t = await action.Invoke();
                tran.Complete();
                return t;
            });
        }

        // Staff table
        public DbSet<Staff> Staff => Set<Staff>();

        // Keep old table for backward compatibility if needed
        public DbSet<BankApi> BankApis => Set<BankApi>();

    // end of database table 
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {

    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Configure Staff entity
        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.StaffId);
            entity.Property(e => e.StaffId).HasMaxLength(8);
            entity.Property(e => e.FullName).HasMaxLength(100).IsRequired();
            entity.Property(e => e.Birthday).IsRequired();
            entity.Property(e => e.Gender).IsRequired();
            entity.Property(e => e.CreatedAt).IsRequired();
            entity.Property(e => e.UpdatedAt).IsRequired();

            // Add indexes for performance
            entity.HasIndex(e => e.FullName);
            entity.HasIndex(e => e.Gender);
            entity.HasIndex(e => e.Birthday);
        });

        modelBuilder.ApplyAllConfigurations();
    }


    public async Task<object?> ExecuteScalarAsync(string Sql, int connectionTimeOut = 0)
    {
        object? value;
        var cn = Database.GetDbConnection();
        using (var cmd = cn.CreateCommand())
        {
            if (cn.State == System.Data.ConnectionState.Closed) { cn.Open(); }
            cmd.CommandText = Sql;
            if (connectionTimeOut != 0)
            {
                cmd.CommandTimeout = connectionTimeOut;
            }
            value = await cmd.ExecuteScalarAsync();
        }
        if (cn.State == System.Data.ConnectionState.Open) { cn.Close(); }
        return value;
    }

    public async Task<T> ExecuteRawSqlQuery<T>(string Sql, int connectionTimeOut = 0) where T : new()
    {
        var jsonResult = await ExecuteScalarAsync(Sql, connectionTimeOut);
        var result = new T();
        if (jsonResult is not null)
        {
            result = JsonHelper.DeserializeObject<T>(jsonResult.ToString());
        }

        return result ?? new T();
    }
}

public class ReadOnlyStaffManagementDbContext : StaffManagementDbContext
{
    public ReadOnlyStaffManagementDbContext()
    {

    }

    public ReadOnlyStaffManagementDbContext(DbContextOptions<ReadOnlyStaffManagementDbContext> options)
        : base(options)
    {
        ChangeTracker.AutoDetectChangesEnabled = false;
        ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
    }
}