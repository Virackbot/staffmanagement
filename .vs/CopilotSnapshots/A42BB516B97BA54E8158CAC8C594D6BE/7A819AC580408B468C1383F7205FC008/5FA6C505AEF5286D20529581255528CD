using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Domain.OutfaceModels;
using OfficeOpenXml;
using iTextSharp.text;
using iTextSharp.text.pdf;

namespace App.Services
{
    public class ExportService
    {
        public async Task<byte[]> ExportToExcelAsync(List<StaffResponseModel> staffList)
        {
            // Note: For EPPlus 8+, license is set via configuration or app.config

            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Staff List");

            // Headers
            worksheet.Cells[1, 1].Value = "Staff ID";
            worksheet.Cells[1, 2].Value = "Full Name";
            worksheet.Cells[1, 3].Value = "Birthday";
            worksheet.Cells[1, 4].Value = "Gender";
            worksheet.Cells[1, 5].Value = "Age";
            worksheet.Cells[1, 6].Value = "Created At";
            worksheet.Cells[1, 7].Value = "Updated At";

            // Style headers
            using (var range = worksheet.Cells[1, 1, 1, 7])
            {
                range.Style.Font.Bold = true;
                range.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
            }

            // Data
            for (int i = 0; i < staffList.Count; i++)
            {
                var staff = staffList[i];
                var row = i + 2;

                worksheet.Cells[row, 1].Value = staff.StaffId;
                worksheet.Cells[row, 2].Value = staff.FullName;
                worksheet.Cells[row, 3].Value = staff.Birthday.ToString("yyyy-MM-dd");
                worksheet.Cells[row, 4].Value = staff.GenderDisplay;
                worksheet.Cells[row, 5].Value = staff.Age;
                worksheet.Cells[row, 6].Value = staff.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss");
                worksheet.Cells[row, 7].Value = staff.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss");
            }

            // Auto-fit columns
            worksheet.Cells.AutoFitColumns();

            return await package.GetAsByteArrayAsync();
        }

        public async Task<byte[]> ExportToPdfAsync(List<StaffResponseModel> staffList)
        {
            using var stream = new MemoryStream();
            var document = new Document(PageSize.A4, 50, 50, 25, 25);
            _ = PdfWriter.GetInstance(document, stream);

            document.Open();

            // Title
            var titleFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 16);
            var title = new Paragraph("Staff Management Report", titleFont);
            title.Alignment = Element.ALIGN_CENTER;
            title.SpacingAfter = 20;
            document.Add(title);

            // Table
            var table = new PdfPTable(7);
            table.WidthPercentage = 100;
            table.SetWidths(new float[] { 15, 25, 15, 10, 8, 15, 15 });

            // Headers
            var headerFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 10);
            table.AddCell(new PdfPCell(new Phrase("Staff ID", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });
            table.AddCell(new PdfPCell(new Phrase("Full Name", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });
            table.AddCell(new PdfPCell(new Phrase("Birthday", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });
            table.AddCell(new PdfPCell(new Phrase("Gender", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });
            table.AddCell(new PdfPCell(new Phrase("Age", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });
            table.AddCell(new PdfPCell(new Phrase("Created At", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });
            table.AddCell(new PdfPCell(new Phrase("Updated At", headerFont)) { BackgroundColor = BaseColor.LIGHT_GRAY });

            // Data
            var dataFont = FontFactory.GetFont(FontFactory.HELVETICA, 9);
            foreach (var staff in staffList)
            {
                table.AddCell(new PdfPCell(new Phrase(staff.StaffId, dataFont)));
                table.AddCell(new PdfPCell(new Phrase(staff.FullName, dataFont)));
                table.AddCell(new PdfPCell(new Phrase(staff.Birthday.ToString("yyyy-MM-dd"), dataFont)));
                table.AddCell(new PdfPCell(new Phrase(staff.GenderDisplay, dataFont)));
                table.AddCell(new PdfPCell(new Phrase(staff.Age.ToString(), dataFont)));
                table.AddCell(new PdfPCell(new Phrase(staff.CreatedAt.ToString("yyyy-MM-dd HH:mm"), dataFont)));
                table.AddCell(new PdfPCell(new Phrase(staff.UpdatedAt.ToString("yyyy-MM-dd HH:mm"), dataFont)));
            }

            document.Add(table);

            // Footer
            var footer = new Paragraph($"Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
                FontFactory.GetFont(FontFactory.HELVETICA_OBLIQUE, 8));
            footer.Alignment = Element.ALIGN_RIGHT;
            footer.SpacingBefore = 20;
            document.Add(footer);

            document.Close();

            return await Task.FromResult(stream.ToArray());
        }
    }
}